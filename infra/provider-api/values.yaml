# Default values for provider-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: meddo.azurecr.io/provider
  tag: latest
  pullPolicy: Always

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik
  path: /
  hosts:
    - provider.api.meddo.tech
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  requests:
    cpu: 1.5
    memory: 6Gi
  limits:
    cpu: 2
    memory: 7Gi

nodeSelector:
  "node-role.kubernetes.io/dedicated": "true"

tolerations: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - "provider-api"
        topologyKey: "kubernetes.io/hostname"

autoscaling:
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 70
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 90


spring:
  meddo:
    wallet:
      discountPercentage: 10
  razorpay:
    apiKey: "rzp_live_zcSNhEiRKKeg87"
    apiSecret: "KOAS810x3ZEqRYoElYknGDPB"
  cache:
    jcache:
      config: "classpath:ehcache/production.xml"
  datasource:
    url: "jdbc:mysql://meddo-db.cluster-ciqusgcofpad.ap-south-1.rds.amazonaws.com:3306/arctern_provider?useSSL=false"
    slaveUrl: "jdbc:mysql://meddo-db.cluster-ciqusgcofpad.ap-south-1.rds.amazonaws.com:3306/arctern_provider?useSSL=false"
    username: "provider_service"
    password: "Qu3AjY4qnzerbJnc"
  sqs:
    consumerKey: "https://sqs.ap-south-1.amazonaws.com/739878518990/provider-consumer-updates-simple"
    accessKey: "AKIA2YRBSIDHAXCGRJ6T"
    secretKey: "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"
  rabbitmq:
    host: "rabbitmq-rabbitmq-ha.default.svc.cluster.local"
    port: "5672"
    username: "test"
    password: "test"
    queueName: "provider-item-updates-simple"
    providerConsumerName: "provider-consumer-updates-simple"
    notification:
      queueproviderItemName: "provider-item-notification-updates-simple"
      queueproviderName: "provider-notification-updates-simple"
      providerDiagnosticLabNotificationQueueName: "provider-diagnostic-notification-updates-simple"
    middleware:
      providerDiagnosticLabQueueName: "provider-diagnostic-updates-simple"
      diagnosticproviderQueueName: "diagnostic-provider-updates-simple"
  security:
    signingKey: MaYzkSjmkzPC57L
    encodingStrength: 256
    securityRealm: Spring Boot JWT Example Realm
    jwt:
      clientId: "testjwtclientid"
      clientSecret: "XY7kmzoNzl100"
  emr:
    apiUrl: "http://emr-api.default.svc.cluster.local"
  auth:
    apiUrl: "http://auth-api-traefik.default.svc.cluster.local/oauth/token"
    username: "admin"
    password: "admin@1c"
    authorization: "Basic dGVzdGp3dGNsaWVudGlkOlhZN2ttem9OemwxMDA="

jvmOpts: "-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:+PrintFlagsFinal -Xms512m -Xmx5g -javaagent:/newrelic/newrelic.jar -Dnewrelic.environment=production"
ssl_cert_arn: arn:aws:acm:ap-south-1:739878518990:certificate/e69f73e9-67c7-461c-8d5e-ebe226d3cdda